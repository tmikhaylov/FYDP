generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?

  // Instead of 'conversations', the user now has multiple projects
  projects      Project[]
  accounts      Account[]
}

// New model to represent a project
model Project {
  id        String        @id @default(cuid())
  name      String
  userId    String
  user      User          @relation(fields: [userId], references: [id])
  chats     Conversation[]
  files     ProjectFile[]
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

// Each file belongs to one project
model ProjectFile {
  id         String   @id @default(cuid())
  filename   String
  projectId  String
  project    Project  @relation(fields: [projectId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

// Renamed 'Conversation' in code to 'Chat' in UI, but keep model name for minimal DB changes
model Conversation {
  id        String @id @default(cuid())
  name      String
  messages  Json

  // Now required
  projectId String
  project   Project @relation(fields: [projectId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
